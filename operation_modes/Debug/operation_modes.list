
operation_modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bb4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08000d5c  08000d5c  00010d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dbc  08000dbc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000dbc  08000dbc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dbc  08000dbc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dc0  08000dc0  00010dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000924  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000328  00000000  00000000  000209f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00020d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c4  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002b43  00000000  00000000  00020f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000012f7  00000000  00000000  00023a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009748  00000000  00000000  00024d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000009ec  00000000  00000000  0002e488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0002ee74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d44 	.word	0x08000d44

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000060 	.word	0x20000060
 80001e4:	08000d44 	.word	0x08000d44

080001e8 <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE of the processor */
void generate_interrupt()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <generate_interrupt+0x2c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <generate_interrupt+0x30>)
 80001f4:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2203      	movs	r2, #3
 8000206:	601a      	str	r2, [r3, #0]

}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000ef00 	.word	0xe000ef00
 8000218:	e000e100 	.word	0xe000e100

0800021c <main>:

/* This function executes in THREAD MODE of the processor */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 8000220:	4804      	ldr	r0, [pc, #16]	; (8000234 <main+0x18>)
 8000222:	f000 f9f9 	bl	8000618 <puts>

	generate_interrupt();
 8000226:	f7ff ffdf 	bl	80001e8 <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <main+0x1c>)
 800022c:	f000 f9f4 	bl	8000618 <puts>

	for(;;);
 8000230:	e7fe      	b.n	8000230 <main+0x14>
 8000232:	bf00      	nop
 8000234:	08000d5c 	.word	0x08000d5c
 8000238:	08000d80 	.word	0x08000d80

0800023c <RTC_WKUP_IRQHandler>:
}

/* This function(ISR) executes in HANDLER MODE of the processor */
void RTC_WKUP_IRQHandler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	printf("In handler mode : ISR\n");
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <RTC_WKUP_IRQHandler+0x10>)
 8000242:	f000 f9e9 	bl	8000618 <puts>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	08000da4 	.word	0x08000da4

08000250 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025c:	2300      	movs	r3, #0
 800025e:	617b      	str	r3, [r7, #20]
 8000260:	e00a      	b.n	8000278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000262:	f3af 8000 	nop.w
 8000266:	4601      	mov	r1, r0
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	60ba      	str	r2, [r7, #8]
 800026e:	b2ca      	uxtb	r2, r1
 8000270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	3301      	adds	r3, #1
 8000276:	617b      	str	r3, [r7, #20]
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	429a      	cmp	r2, r3
 800027e:	dbf0      	blt.n	8000262 <_read+0x12>
  }

  return len;
 8000280:	687b      	ldr	r3, [r7, #4]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3718      	adds	r7, #24
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}

0800028a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800028a:	b580      	push	{r7, lr}
 800028c:	b086      	sub	sp, #24
 800028e:	af00      	add	r7, sp, #0
 8000290:	60f8      	str	r0, [r7, #12]
 8000292:	60b9      	str	r1, [r7, #8]
 8000294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	e009      	b.n	80002b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	1c5a      	adds	r2, r3, #1
 80002a0:	60ba      	str	r2, [r7, #8]
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	3301      	adds	r3, #1
 80002ae:	617b      	str	r3, [r7, #20]
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	dbf1      	blt.n	800029c <_write+0x12>
  }
  return len;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <_close>:

int _close(int file)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002da:	b480      	push	{r7}
 80002dc:	b083      	sub	sp, #12
 80002de:	af00      	add	r7, sp, #0
 80002e0:	6078      	str	r0, [r7, #4]
 80002e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002ea:	605a      	str	r2, [r3, #4]
  return 0;
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr

080002fa <_isatty>:

int _isatty(int file)
{
 80002fa:	b480      	push	{r7}
 80002fc:	b083      	sub	sp, #12
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000302:	2301      	movs	r3, #1
}
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000334:	4a14      	ldr	r2, [pc, #80]	; (8000388 <_sbrk+0x5c>)
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <_sbrk+0x60>)
 8000338:	1ad3      	subs	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <_sbrk+0x64>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d102      	bne.n	800034e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <_sbrk+0x64>)
 800034a:	4a12      	ldr	r2, [pc, #72]	; (8000394 <_sbrk+0x68>)
 800034c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <_sbrk+0x64>)
 8000350:	681a      	ldr	r2, [r3, #0]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4413      	add	r3, r2
 8000356:	693a      	ldr	r2, [r7, #16]
 8000358:	429a      	cmp	r2, r3
 800035a:	d207      	bcs.n	800036c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800035c:	f000 f96c 	bl	8000638 <__errno>
 8000360:	4603      	mov	r3, r0
 8000362:	220c      	movs	r2, #12
 8000364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800036a:	e009      	b.n	8000380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <_sbrk+0x64>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000372:	4b07      	ldr	r3, [pc, #28]	; (8000390 <_sbrk+0x64>)
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4413      	add	r3, r2
 800037a:	4a05      	ldr	r2, [pc, #20]	; (8000390 <_sbrk+0x64>)
 800037c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800037e:	68fb      	ldr	r3, [r7, #12]
}
 8000380:	4618      	mov	r0, r3
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20020000 	.word	0x20020000
 800038c:	00000400 	.word	0x00000400
 8000390:	20000078 	.word	0x20000078
 8000394:	200001c8 	.word	0x200001c8

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f000 f93d 	bl	8000644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff27 	bl	800021c <main>

080003ce <LoopForever>:

LoopForever:
  b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80003dc:	08000dc4 	.word	0x08000dc4
  ldr r2, =_sbss
 80003e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80003e4:	200001c8 	.word	0x200001c8

080003e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC_IRQHandler>
	...

080003ec <std>:
 80003ec:	2300      	movs	r3, #0
 80003ee:	b510      	push	{r4, lr}
 80003f0:	4604      	mov	r4, r0
 80003f2:	e9c0 3300 	strd	r3, r3, [r0]
 80003f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80003fa:	6083      	str	r3, [r0, #8]
 80003fc:	8181      	strh	r1, [r0, #12]
 80003fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000400:	81c2      	strh	r2, [r0, #14]
 8000402:	6183      	str	r3, [r0, #24]
 8000404:	4619      	mov	r1, r3
 8000406:	2208      	movs	r2, #8
 8000408:	305c      	adds	r0, #92	; 0x5c
 800040a:	f000 f90d 	bl	8000628 <memset>
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <std+0x58>)
 8000410:	6263      	str	r3, [r4, #36]	; 0x24
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <std+0x5c>)
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <std+0x60>)
 8000418:	62e3      	str	r3, [r4, #44]	; 0x2c
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <std+0x64>)
 800041c:	6323      	str	r3, [r4, #48]	; 0x30
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <std+0x68>)
 8000420:	6224      	str	r4, [r4, #32]
 8000422:	429c      	cmp	r4, r3
 8000424:	d006      	beq.n	8000434 <std+0x48>
 8000426:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800042a:	4294      	cmp	r4, r2
 800042c:	d002      	beq.n	8000434 <std+0x48>
 800042e:	33d0      	adds	r3, #208	; 0xd0
 8000430:	429c      	cmp	r4, r3
 8000432:	d105      	bne.n	8000440 <std+0x54>
 8000434:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800043c:	f000 b926 	b.w	800068c <__retarget_lock_init_recursive>
 8000440:	bd10      	pop	{r4, pc}
 8000442:	bf00      	nop
 8000444:	08000949 	.word	0x08000949
 8000448:	0800096b 	.word	0x0800096b
 800044c:	080009a3 	.word	0x080009a3
 8000450:	080009c7 	.word	0x080009c7
 8000454:	2000007c 	.word	0x2000007c

08000458 <stdio_exit_handler>:
 8000458:	4a02      	ldr	r2, [pc, #8]	; (8000464 <stdio_exit_handler+0xc>)
 800045a:	4903      	ldr	r1, [pc, #12]	; (8000468 <stdio_exit_handler+0x10>)
 800045c:	4803      	ldr	r0, [pc, #12]	; (800046c <stdio_exit_handler+0x14>)
 800045e:	f000 b869 	b.w	8000534 <_fwalk_sglue>
 8000462:	bf00      	nop
 8000464:	20000000 	.word	0x20000000
 8000468:	080008e1 	.word	0x080008e1
 800046c:	2000000c 	.word	0x2000000c

08000470 <cleanup_stdio>:
 8000470:	6841      	ldr	r1, [r0, #4]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <cleanup_stdio+0x34>)
 8000474:	4299      	cmp	r1, r3
 8000476:	b510      	push	{r4, lr}
 8000478:	4604      	mov	r4, r0
 800047a:	d001      	beq.n	8000480 <cleanup_stdio+0x10>
 800047c:	f000 fa30 	bl	80008e0 <_fflush_r>
 8000480:	68a1      	ldr	r1, [r4, #8]
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <cleanup_stdio+0x38>)
 8000484:	4299      	cmp	r1, r3
 8000486:	d002      	beq.n	800048e <cleanup_stdio+0x1e>
 8000488:	4620      	mov	r0, r4
 800048a:	f000 fa29 	bl	80008e0 <_fflush_r>
 800048e:	68e1      	ldr	r1, [r4, #12]
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <cleanup_stdio+0x3c>)
 8000492:	4299      	cmp	r1, r3
 8000494:	d004      	beq.n	80004a0 <cleanup_stdio+0x30>
 8000496:	4620      	mov	r0, r4
 8000498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800049c:	f000 ba20 	b.w	80008e0 <_fflush_r>
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	bf00      	nop
 80004a4:	2000007c 	.word	0x2000007c
 80004a8:	200000e4 	.word	0x200000e4
 80004ac:	2000014c 	.word	0x2000014c

080004b0 <global_stdio_init.part.0>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <global_stdio_init.part.0+0x30>)
 80004b4:	4c0b      	ldr	r4, [pc, #44]	; (80004e4 <global_stdio_init.part.0+0x34>)
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <global_stdio_init.part.0+0x38>)
 80004b8:	601a      	str	r2, [r3, #0]
 80004ba:	4620      	mov	r0, r4
 80004bc:	2200      	movs	r2, #0
 80004be:	2104      	movs	r1, #4
 80004c0:	f7ff ff94 	bl	80003ec <std>
 80004c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80004c8:	2201      	movs	r2, #1
 80004ca:	2109      	movs	r1, #9
 80004cc:	f7ff ff8e 	bl	80003ec <std>
 80004d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80004d4:	2202      	movs	r2, #2
 80004d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004da:	2112      	movs	r1, #18
 80004dc:	f7ff bf86 	b.w	80003ec <std>
 80004e0:	200001b4 	.word	0x200001b4
 80004e4:	2000007c 	.word	0x2000007c
 80004e8:	08000459 	.word	0x08000459

080004ec <__sfp_lock_acquire>:
 80004ec:	4801      	ldr	r0, [pc, #4]	; (80004f4 <__sfp_lock_acquire+0x8>)
 80004ee:	f000 b8ce 	b.w	800068e <__retarget_lock_acquire_recursive>
 80004f2:	bf00      	nop
 80004f4:	200001b9 	.word	0x200001b9

080004f8 <__sfp_lock_release>:
 80004f8:	4801      	ldr	r0, [pc, #4]	; (8000500 <__sfp_lock_release+0x8>)
 80004fa:	f000 b8c9 	b.w	8000690 <__retarget_lock_release_recursive>
 80004fe:	bf00      	nop
 8000500:	200001b9 	.word	0x200001b9

08000504 <__sinit>:
 8000504:	b510      	push	{r4, lr}
 8000506:	4604      	mov	r4, r0
 8000508:	f7ff fff0 	bl	80004ec <__sfp_lock_acquire>
 800050c:	6a23      	ldr	r3, [r4, #32]
 800050e:	b11b      	cbz	r3, 8000518 <__sinit+0x14>
 8000510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000514:	f7ff bff0 	b.w	80004f8 <__sfp_lock_release>
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <__sinit+0x28>)
 800051a:	6223      	str	r3, [r4, #32]
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <__sinit+0x2c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d1f5      	bne.n	8000510 <__sinit+0xc>
 8000524:	f7ff ffc4 	bl	80004b0 <global_stdio_init.part.0>
 8000528:	e7f2      	b.n	8000510 <__sinit+0xc>
 800052a:	bf00      	nop
 800052c:	08000471 	.word	0x08000471
 8000530:	200001b4 	.word	0x200001b4

08000534 <_fwalk_sglue>:
 8000534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000538:	4607      	mov	r7, r0
 800053a:	4688      	mov	r8, r1
 800053c:	4614      	mov	r4, r2
 800053e:	2600      	movs	r6, #0
 8000540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000544:	f1b9 0901 	subs.w	r9, r9, #1
 8000548:	d505      	bpl.n	8000556 <_fwalk_sglue+0x22>
 800054a:	6824      	ldr	r4, [r4, #0]
 800054c:	2c00      	cmp	r4, #0
 800054e:	d1f7      	bne.n	8000540 <_fwalk_sglue+0xc>
 8000550:	4630      	mov	r0, r6
 8000552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000556:	89ab      	ldrh	r3, [r5, #12]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d907      	bls.n	800056c <_fwalk_sglue+0x38>
 800055c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000560:	3301      	adds	r3, #1
 8000562:	d003      	beq.n	800056c <_fwalk_sglue+0x38>
 8000564:	4629      	mov	r1, r5
 8000566:	4638      	mov	r0, r7
 8000568:	47c0      	blx	r8
 800056a:	4306      	orrs	r6, r0
 800056c:	3568      	adds	r5, #104	; 0x68
 800056e:	e7e9      	b.n	8000544 <_fwalk_sglue+0x10>

08000570 <_puts_r>:
 8000570:	6a03      	ldr	r3, [r0, #32]
 8000572:	b570      	push	{r4, r5, r6, lr}
 8000574:	6884      	ldr	r4, [r0, #8]
 8000576:	4605      	mov	r5, r0
 8000578:	460e      	mov	r6, r1
 800057a:	b90b      	cbnz	r3, 8000580 <_puts_r+0x10>
 800057c:	f7ff ffc2 	bl	8000504 <__sinit>
 8000580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000582:	07db      	lsls	r3, r3, #31
 8000584:	d405      	bmi.n	8000592 <_puts_r+0x22>
 8000586:	89a3      	ldrh	r3, [r4, #12]
 8000588:	0598      	lsls	r0, r3, #22
 800058a:	d402      	bmi.n	8000592 <_puts_r+0x22>
 800058c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800058e:	f000 f87e 	bl	800068e <__retarget_lock_acquire_recursive>
 8000592:	89a3      	ldrh	r3, [r4, #12]
 8000594:	0719      	lsls	r1, r3, #28
 8000596:	d513      	bpl.n	80005c0 <_puts_r+0x50>
 8000598:	6923      	ldr	r3, [r4, #16]
 800059a:	b18b      	cbz	r3, 80005c0 <_puts_r+0x50>
 800059c:	3e01      	subs	r6, #1
 800059e:	68a3      	ldr	r3, [r4, #8]
 80005a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005a4:	3b01      	subs	r3, #1
 80005a6:	60a3      	str	r3, [r4, #8]
 80005a8:	b9e9      	cbnz	r1, 80005e6 <_puts_r+0x76>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da2e      	bge.n	800060c <_puts_r+0x9c>
 80005ae:	4622      	mov	r2, r4
 80005b0:	210a      	movs	r1, #10
 80005b2:	4628      	mov	r0, r5
 80005b4:	f000 fa0b 	bl	80009ce <__swbuf_r>
 80005b8:	3001      	adds	r0, #1
 80005ba:	d007      	beq.n	80005cc <_puts_r+0x5c>
 80005bc:	250a      	movs	r5, #10
 80005be:	e007      	b.n	80005d0 <_puts_r+0x60>
 80005c0:	4621      	mov	r1, r4
 80005c2:	4628      	mov	r0, r5
 80005c4:	f000 fa40 	bl	8000a48 <__swsetup_r>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d0e7      	beq.n	800059c <_puts_r+0x2c>
 80005cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80005d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80005d2:	07da      	lsls	r2, r3, #31
 80005d4:	d405      	bmi.n	80005e2 <_puts_r+0x72>
 80005d6:	89a3      	ldrh	r3, [r4, #12]
 80005d8:	059b      	lsls	r3, r3, #22
 80005da:	d402      	bmi.n	80005e2 <_puts_r+0x72>
 80005dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80005de:	f000 f857 	bl	8000690 <__retarget_lock_release_recursive>
 80005e2:	4628      	mov	r0, r5
 80005e4:	bd70      	pop	{r4, r5, r6, pc}
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	da04      	bge.n	80005f4 <_puts_r+0x84>
 80005ea:	69a2      	ldr	r2, [r4, #24]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	dc06      	bgt.n	80005fe <_puts_r+0x8e>
 80005f0:	290a      	cmp	r1, #10
 80005f2:	d004      	beq.n	80005fe <_puts_r+0x8e>
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	6022      	str	r2, [r4, #0]
 80005fa:	7019      	strb	r1, [r3, #0]
 80005fc:	e7cf      	b.n	800059e <_puts_r+0x2e>
 80005fe:	4622      	mov	r2, r4
 8000600:	4628      	mov	r0, r5
 8000602:	f000 f9e4 	bl	80009ce <__swbuf_r>
 8000606:	3001      	adds	r0, #1
 8000608:	d1c9      	bne.n	800059e <_puts_r+0x2e>
 800060a:	e7df      	b.n	80005cc <_puts_r+0x5c>
 800060c:	6823      	ldr	r3, [r4, #0]
 800060e:	250a      	movs	r5, #10
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	6022      	str	r2, [r4, #0]
 8000614:	701d      	strb	r5, [r3, #0]
 8000616:	e7db      	b.n	80005d0 <_puts_r+0x60>

08000618 <puts>:
 8000618:	4b02      	ldr	r3, [pc, #8]	; (8000624 <puts+0xc>)
 800061a:	4601      	mov	r1, r0
 800061c:	6818      	ldr	r0, [r3, #0]
 800061e:	f7ff bfa7 	b.w	8000570 <_puts_r>
 8000622:	bf00      	nop
 8000624:	20000058 	.word	0x20000058

08000628 <memset>:
 8000628:	4402      	add	r2, r0
 800062a:	4603      	mov	r3, r0
 800062c:	4293      	cmp	r3, r2
 800062e:	d100      	bne.n	8000632 <memset+0xa>
 8000630:	4770      	bx	lr
 8000632:	f803 1b01 	strb.w	r1, [r3], #1
 8000636:	e7f9      	b.n	800062c <memset+0x4>

08000638 <__errno>:
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <__errno+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000058 	.word	0x20000058

08000644 <__libc_init_array>:
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	4d0d      	ldr	r5, [pc, #52]	; (800067c <__libc_init_array+0x38>)
 8000648:	4c0d      	ldr	r4, [pc, #52]	; (8000680 <__libc_init_array+0x3c>)
 800064a:	1b64      	subs	r4, r4, r5
 800064c:	10a4      	asrs	r4, r4, #2
 800064e:	2600      	movs	r6, #0
 8000650:	42a6      	cmp	r6, r4
 8000652:	d109      	bne.n	8000668 <__libc_init_array+0x24>
 8000654:	4d0b      	ldr	r5, [pc, #44]	; (8000684 <__libc_init_array+0x40>)
 8000656:	4c0c      	ldr	r4, [pc, #48]	; (8000688 <__libc_init_array+0x44>)
 8000658:	f000 fb74 	bl	8000d44 <_init>
 800065c:	1b64      	subs	r4, r4, r5
 800065e:	10a4      	asrs	r4, r4, #2
 8000660:	2600      	movs	r6, #0
 8000662:	42a6      	cmp	r6, r4
 8000664:	d105      	bne.n	8000672 <__libc_init_array+0x2e>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f855 3b04 	ldr.w	r3, [r5], #4
 800066c:	4798      	blx	r3
 800066e:	3601      	adds	r6, #1
 8000670:	e7ee      	b.n	8000650 <__libc_init_array+0xc>
 8000672:	f855 3b04 	ldr.w	r3, [r5], #4
 8000676:	4798      	blx	r3
 8000678:	3601      	adds	r6, #1
 800067a:	e7f2      	b.n	8000662 <__libc_init_array+0x1e>
 800067c:	08000dbc 	.word	0x08000dbc
 8000680:	08000dbc 	.word	0x08000dbc
 8000684:	08000dbc 	.word	0x08000dbc
 8000688:	08000dc0 	.word	0x08000dc0

0800068c <__retarget_lock_init_recursive>:
 800068c:	4770      	bx	lr

0800068e <__retarget_lock_acquire_recursive>:
 800068e:	4770      	bx	lr

08000690 <__retarget_lock_release_recursive>:
 8000690:	4770      	bx	lr
	...

08000694 <sbrk_aligned>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4e0e      	ldr	r6, [pc, #56]	; (80006d0 <sbrk_aligned+0x3c>)
 8000698:	460c      	mov	r4, r1
 800069a:	6831      	ldr	r1, [r6, #0]
 800069c:	4605      	mov	r5, r0
 800069e:	b911      	cbnz	r1, 80006a6 <sbrk_aligned+0x12>
 80006a0:	f000 fae2 	bl	8000c68 <_sbrk_r>
 80006a4:	6030      	str	r0, [r6, #0]
 80006a6:	4621      	mov	r1, r4
 80006a8:	4628      	mov	r0, r5
 80006aa:	f000 fadd 	bl	8000c68 <_sbrk_r>
 80006ae:	1c43      	adds	r3, r0, #1
 80006b0:	d00a      	beq.n	80006c8 <sbrk_aligned+0x34>
 80006b2:	1cc4      	adds	r4, r0, #3
 80006b4:	f024 0403 	bic.w	r4, r4, #3
 80006b8:	42a0      	cmp	r0, r4
 80006ba:	d007      	beq.n	80006cc <sbrk_aligned+0x38>
 80006bc:	1a21      	subs	r1, r4, r0
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 fad2 	bl	8000c68 <_sbrk_r>
 80006c4:	3001      	adds	r0, #1
 80006c6:	d101      	bne.n	80006cc <sbrk_aligned+0x38>
 80006c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80006cc:	4620      	mov	r0, r4
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	200001c0 	.word	0x200001c0

080006d4 <_malloc_r>:
 80006d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006d8:	1ccd      	adds	r5, r1, #3
 80006da:	f025 0503 	bic.w	r5, r5, #3
 80006de:	3508      	adds	r5, #8
 80006e0:	2d0c      	cmp	r5, #12
 80006e2:	bf38      	it	cc
 80006e4:	250c      	movcc	r5, #12
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	4607      	mov	r7, r0
 80006ea:	db01      	blt.n	80006f0 <_malloc_r+0x1c>
 80006ec:	42a9      	cmp	r1, r5
 80006ee:	d905      	bls.n	80006fc <_malloc_r+0x28>
 80006f0:	230c      	movs	r3, #12
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	2600      	movs	r6, #0
 80006f6:	4630      	mov	r0, r6
 80006f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80007d0 <_malloc_r+0xfc>
 8000700:	f000 f916 	bl	8000930 <__malloc_lock>
 8000704:	f8d8 3000 	ldr.w	r3, [r8]
 8000708:	461c      	mov	r4, r3
 800070a:	bb5c      	cbnz	r4, 8000764 <_malloc_r+0x90>
 800070c:	4629      	mov	r1, r5
 800070e:	4638      	mov	r0, r7
 8000710:	f7ff ffc0 	bl	8000694 <sbrk_aligned>
 8000714:	1c43      	adds	r3, r0, #1
 8000716:	4604      	mov	r4, r0
 8000718:	d155      	bne.n	80007c6 <_malloc_r+0xf2>
 800071a:	f8d8 4000 	ldr.w	r4, [r8]
 800071e:	4626      	mov	r6, r4
 8000720:	2e00      	cmp	r6, #0
 8000722:	d145      	bne.n	80007b0 <_malloc_r+0xdc>
 8000724:	2c00      	cmp	r4, #0
 8000726:	d048      	beq.n	80007ba <_malloc_r+0xe6>
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	4631      	mov	r1, r6
 800072c:	4638      	mov	r0, r7
 800072e:	eb04 0903 	add.w	r9, r4, r3
 8000732:	f000 fa99 	bl	8000c68 <_sbrk_r>
 8000736:	4581      	cmp	r9, r0
 8000738:	d13f      	bne.n	80007ba <_malloc_r+0xe6>
 800073a:	6821      	ldr	r1, [r4, #0]
 800073c:	1a6d      	subs	r5, r5, r1
 800073e:	4629      	mov	r1, r5
 8000740:	4638      	mov	r0, r7
 8000742:	f7ff ffa7 	bl	8000694 <sbrk_aligned>
 8000746:	3001      	adds	r0, #1
 8000748:	d037      	beq.n	80007ba <_malloc_r+0xe6>
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	442b      	add	r3, r5
 800074e:	6023      	str	r3, [r4, #0]
 8000750:	f8d8 3000 	ldr.w	r3, [r8]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d038      	beq.n	80007ca <_malloc_r+0xf6>
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	42a2      	cmp	r2, r4
 800075c:	d12b      	bne.n	80007b6 <_malloc_r+0xe2>
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	e00f      	b.n	8000784 <_malloc_r+0xb0>
 8000764:	6822      	ldr	r2, [r4, #0]
 8000766:	1b52      	subs	r2, r2, r5
 8000768:	d41f      	bmi.n	80007aa <_malloc_r+0xd6>
 800076a:	2a0b      	cmp	r2, #11
 800076c:	d917      	bls.n	800079e <_malloc_r+0xca>
 800076e:	1961      	adds	r1, r4, r5
 8000770:	42a3      	cmp	r3, r4
 8000772:	6025      	str	r5, [r4, #0]
 8000774:	bf18      	it	ne
 8000776:	6059      	strne	r1, [r3, #4]
 8000778:	6863      	ldr	r3, [r4, #4]
 800077a:	bf08      	it	eq
 800077c:	f8c8 1000 	streq.w	r1, [r8]
 8000780:	5162      	str	r2, [r4, r5]
 8000782:	604b      	str	r3, [r1, #4]
 8000784:	4638      	mov	r0, r7
 8000786:	f104 060b 	add.w	r6, r4, #11
 800078a:	f000 f8d7 	bl	800093c <__malloc_unlock>
 800078e:	f026 0607 	bic.w	r6, r6, #7
 8000792:	1d23      	adds	r3, r4, #4
 8000794:	1af2      	subs	r2, r6, r3
 8000796:	d0ae      	beq.n	80006f6 <_malloc_r+0x22>
 8000798:	1b9b      	subs	r3, r3, r6
 800079a:	50a3      	str	r3, [r4, r2]
 800079c:	e7ab      	b.n	80006f6 <_malloc_r+0x22>
 800079e:	42a3      	cmp	r3, r4
 80007a0:	6862      	ldr	r2, [r4, #4]
 80007a2:	d1dd      	bne.n	8000760 <_malloc_r+0x8c>
 80007a4:	f8c8 2000 	str.w	r2, [r8]
 80007a8:	e7ec      	b.n	8000784 <_malloc_r+0xb0>
 80007aa:	4623      	mov	r3, r4
 80007ac:	6864      	ldr	r4, [r4, #4]
 80007ae:	e7ac      	b.n	800070a <_malloc_r+0x36>
 80007b0:	4634      	mov	r4, r6
 80007b2:	6876      	ldr	r6, [r6, #4]
 80007b4:	e7b4      	b.n	8000720 <_malloc_r+0x4c>
 80007b6:	4613      	mov	r3, r2
 80007b8:	e7cc      	b.n	8000754 <_malloc_r+0x80>
 80007ba:	230c      	movs	r3, #12
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4638      	mov	r0, r7
 80007c0:	f000 f8bc 	bl	800093c <__malloc_unlock>
 80007c4:	e797      	b.n	80006f6 <_malloc_r+0x22>
 80007c6:	6025      	str	r5, [r4, #0]
 80007c8:	e7dc      	b.n	8000784 <_malloc_r+0xb0>
 80007ca:	605b      	str	r3, [r3, #4]
 80007cc:	deff      	udf	#255	; 0xff
 80007ce:	bf00      	nop
 80007d0:	200001bc 	.word	0x200001bc

080007d4 <__sflush_r>:
 80007d4:	898a      	ldrh	r2, [r1, #12]
 80007d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007da:	4605      	mov	r5, r0
 80007dc:	0710      	lsls	r0, r2, #28
 80007de:	460c      	mov	r4, r1
 80007e0:	d458      	bmi.n	8000894 <__sflush_r+0xc0>
 80007e2:	684b      	ldr	r3, [r1, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	dc05      	bgt.n	80007f4 <__sflush_r+0x20>
 80007e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dc02      	bgt.n	80007f4 <__sflush_r+0x20>
 80007ee:	2000      	movs	r0, #0
 80007f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007f6:	2e00      	cmp	r6, #0
 80007f8:	d0f9      	beq.n	80007ee <__sflush_r+0x1a>
 80007fa:	2300      	movs	r3, #0
 80007fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000800:	682f      	ldr	r7, [r5, #0]
 8000802:	6a21      	ldr	r1, [r4, #32]
 8000804:	602b      	str	r3, [r5, #0]
 8000806:	d032      	beq.n	800086e <__sflush_r+0x9a>
 8000808:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800080a:	89a3      	ldrh	r3, [r4, #12]
 800080c:	075a      	lsls	r2, r3, #29
 800080e:	d505      	bpl.n	800081c <__sflush_r+0x48>
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	1ac0      	subs	r0, r0, r3
 8000814:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000816:	b10b      	cbz	r3, 800081c <__sflush_r+0x48>
 8000818:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800081a:	1ac0      	subs	r0, r0, r3
 800081c:	2300      	movs	r3, #0
 800081e:	4602      	mov	r2, r0
 8000820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000822:	6a21      	ldr	r1, [r4, #32]
 8000824:	4628      	mov	r0, r5
 8000826:	47b0      	blx	r6
 8000828:	1c43      	adds	r3, r0, #1
 800082a:	89a3      	ldrh	r3, [r4, #12]
 800082c:	d106      	bne.n	800083c <__sflush_r+0x68>
 800082e:	6829      	ldr	r1, [r5, #0]
 8000830:	291d      	cmp	r1, #29
 8000832:	d82b      	bhi.n	800088c <__sflush_r+0xb8>
 8000834:	4a29      	ldr	r2, [pc, #164]	; (80008dc <__sflush_r+0x108>)
 8000836:	410a      	asrs	r2, r1
 8000838:	07d6      	lsls	r6, r2, #31
 800083a:	d427      	bmi.n	800088c <__sflush_r+0xb8>
 800083c:	2200      	movs	r2, #0
 800083e:	6062      	str	r2, [r4, #4]
 8000840:	04d9      	lsls	r1, r3, #19
 8000842:	6922      	ldr	r2, [r4, #16]
 8000844:	6022      	str	r2, [r4, #0]
 8000846:	d504      	bpl.n	8000852 <__sflush_r+0x7e>
 8000848:	1c42      	adds	r2, r0, #1
 800084a:	d101      	bne.n	8000850 <__sflush_r+0x7c>
 800084c:	682b      	ldr	r3, [r5, #0]
 800084e:	b903      	cbnz	r3, 8000852 <__sflush_r+0x7e>
 8000850:	6560      	str	r0, [r4, #84]	; 0x54
 8000852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000854:	602f      	str	r7, [r5, #0]
 8000856:	2900      	cmp	r1, #0
 8000858:	d0c9      	beq.n	80007ee <__sflush_r+0x1a>
 800085a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800085e:	4299      	cmp	r1, r3
 8000860:	d002      	beq.n	8000868 <__sflush_r+0x94>
 8000862:	4628      	mov	r0, r5
 8000864:	f000 fa22 	bl	8000cac <_free_r>
 8000868:	2000      	movs	r0, #0
 800086a:	6360      	str	r0, [r4, #52]	; 0x34
 800086c:	e7c0      	b.n	80007f0 <__sflush_r+0x1c>
 800086e:	2301      	movs	r3, #1
 8000870:	4628      	mov	r0, r5
 8000872:	47b0      	blx	r6
 8000874:	1c41      	adds	r1, r0, #1
 8000876:	d1c8      	bne.n	800080a <__sflush_r+0x36>
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d0c5      	beq.n	800080a <__sflush_r+0x36>
 800087e:	2b1d      	cmp	r3, #29
 8000880:	d001      	beq.n	8000886 <__sflush_r+0xb2>
 8000882:	2b16      	cmp	r3, #22
 8000884:	d101      	bne.n	800088a <__sflush_r+0xb6>
 8000886:	602f      	str	r7, [r5, #0]
 8000888:	e7b1      	b.n	80007ee <__sflush_r+0x1a>
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	81a3      	strh	r3, [r4, #12]
 8000892:	e7ad      	b.n	80007f0 <__sflush_r+0x1c>
 8000894:	690f      	ldr	r7, [r1, #16]
 8000896:	2f00      	cmp	r7, #0
 8000898:	d0a9      	beq.n	80007ee <__sflush_r+0x1a>
 800089a:	0793      	lsls	r3, r2, #30
 800089c:	680e      	ldr	r6, [r1, #0]
 800089e:	bf08      	it	eq
 80008a0:	694b      	ldreq	r3, [r1, #20]
 80008a2:	600f      	str	r7, [r1, #0]
 80008a4:	bf18      	it	ne
 80008a6:	2300      	movne	r3, #0
 80008a8:	eba6 0807 	sub.w	r8, r6, r7
 80008ac:	608b      	str	r3, [r1, #8]
 80008ae:	f1b8 0f00 	cmp.w	r8, #0
 80008b2:	dd9c      	ble.n	80007ee <__sflush_r+0x1a>
 80008b4:	6a21      	ldr	r1, [r4, #32]
 80008b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80008b8:	4643      	mov	r3, r8
 80008ba:	463a      	mov	r2, r7
 80008bc:	4628      	mov	r0, r5
 80008be:	47b0      	blx	r6
 80008c0:	2800      	cmp	r0, #0
 80008c2:	dc06      	bgt.n	80008d2 <__sflush_r+0xfe>
 80008c4:	89a3      	ldrh	r3, [r4, #12]
 80008c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ca:	81a3      	strh	r3, [r4, #12]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d0:	e78e      	b.n	80007f0 <__sflush_r+0x1c>
 80008d2:	4407      	add	r7, r0
 80008d4:	eba8 0800 	sub.w	r8, r8, r0
 80008d8:	e7e9      	b.n	80008ae <__sflush_r+0xda>
 80008da:	bf00      	nop
 80008dc:	dfbffffe 	.word	0xdfbffffe

080008e0 <_fflush_r>:
 80008e0:	b538      	push	{r3, r4, r5, lr}
 80008e2:	690b      	ldr	r3, [r1, #16]
 80008e4:	4605      	mov	r5, r0
 80008e6:	460c      	mov	r4, r1
 80008e8:	b913      	cbnz	r3, 80008f0 <_fflush_r+0x10>
 80008ea:	2500      	movs	r5, #0
 80008ec:	4628      	mov	r0, r5
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	b118      	cbz	r0, 80008fa <_fflush_r+0x1a>
 80008f2:	6a03      	ldr	r3, [r0, #32]
 80008f4:	b90b      	cbnz	r3, 80008fa <_fflush_r+0x1a>
 80008f6:	f7ff fe05 	bl	8000504 <__sinit>
 80008fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f3      	beq.n	80008ea <_fflush_r+0xa>
 8000902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000904:	07d0      	lsls	r0, r2, #31
 8000906:	d404      	bmi.n	8000912 <_fflush_r+0x32>
 8000908:	0599      	lsls	r1, r3, #22
 800090a:	d402      	bmi.n	8000912 <_fflush_r+0x32>
 800090c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800090e:	f7ff febe 	bl	800068e <__retarget_lock_acquire_recursive>
 8000912:	4628      	mov	r0, r5
 8000914:	4621      	mov	r1, r4
 8000916:	f7ff ff5d 	bl	80007d4 <__sflush_r>
 800091a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800091c:	07da      	lsls	r2, r3, #31
 800091e:	4605      	mov	r5, r0
 8000920:	d4e4      	bmi.n	80008ec <_fflush_r+0xc>
 8000922:	89a3      	ldrh	r3, [r4, #12]
 8000924:	059b      	lsls	r3, r3, #22
 8000926:	d4e1      	bmi.n	80008ec <_fflush_r+0xc>
 8000928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800092a:	f7ff feb1 	bl	8000690 <__retarget_lock_release_recursive>
 800092e:	e7dd      	b.n	80008ec <_fflush_r+0xc>

08000930 <__malloc_lock>:
 8000930:	4801      	ldr	r0, [pc, #4]	; (8000938 <__malloc_lock+0x8>)
 8000932:	f7ff beac 	b.w	800068e <__retarget_lock_acquire_recursive>
 8000936:	bf00      	nop
 8000938:	200001b8 	.word	0x200001b8

0800093c <__malloc_unlock>:
 800093c:	4801      	ldr	r0, [pc, #4]	; (8000944 <__malloc_unlock+0x8>)
 800093e:	f7ff bea7 	b.w	8000690 <__retarget_lock_release_recursive>
 8000942:	bf00      	nop
 8000944:	200001b8 	.word	0x200001b8

08000948 <__sread>:
 8000948:	b510      	push	{r4, lr}
 800094a:	460c      	mov	r4, r1
 800094c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000950:	f000 f978 	bl	8000c44 <_read_r>
 8000954:	2800      	cmp	r0, #0
 8000956:	bfab      	itete	ge
 8000958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800095a:	89a3      	ldrhlt	r3, [r4, #12]
 800095c:	181b      	addge	r3, r3, r0
 800095e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000962:	bfac      	ite	ge
 8000964:	6563      	strge	r3, [r4, #84]	; 0x54
 8000966:	81a3      	strhlt	r3, [r4, #12]
 8000968:	bd10      	pop	{r4, pc}

0800096a <__swrite>:
 800096a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800096e:	461f      	mov	r7, r3
 8000970:	898b      	ldrh	r3, [r1, #12]
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	4605      	mov	r5, r0
 8000976:	460c      	mov	r4, r1
 8000978:	4616      	mov	r6, r2
 800097a:	d505      	bpl.n	8000988 <__swrite+0x1e>
 800097c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000980:	2302      	movs	r3, #2
 8000982:	2200      	movs	r2, #0
 8000984:	f000 f94c 	bl	8000c20 <_lseek_r>
 8000988:	89a3      	ldrh	r3, [r4, #12]
 800098a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800098e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000992:	81a3      	strh	r3, [r4, #12]
 8000994:	4632      	mov	r2, r6
 8000996:	463b      	mov	r3, r7
 8000998:	4628      	mov	r0, r5
 800099a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800099e:	f000 b973 	b.w	8000c88 <_write_r>

080009a2 <__sseek>:
 80009a2:	b510      	push	{r4, lr}
 80009a4:	460c      	mov	r4, r1
 80009a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009aa:	f000 f939 	bl	8000c20 <_lseek_r>
 80009ae:	1c43      	adds	r3, r0, #1
 80009b0:	89a3      	ldrh	r3, [r4, #12]
 80009b2:	bf15      	itete	ne
 80009b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80009b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80009ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80009be:	81a3      	strheq	r3, [r4, #12]
 80009c0:	bf18      	it	ne
 80009c2:	81a3      	strhne	r3, [r4, #12]
 80009c4:	bd10      	pop	{r4, pc}

080009c6 <__sclose>:
 80009c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ca:	f000 b8f7 	b.w	8000bbc <_close_r>

080009ce <__swbuf_r>:
 80009ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d0:	460e      	mov	r6, r1
 80009d2:	4614      	mov	r4, r2
 80009d4:	4605      	mov	r5, r0
 80009d6:	b118      	cbz	r0, 80009e0 <__swbuf_r+0x12>
 80009d8:	6a03      	ldr	r3, [r0, #32]
 80009da:	b90b      	cbnz	r3, 80009e0 <__swbuf_r+0x12>
 80009dc:	f7ff fd92 	bl	8000504 <__sinit>
 80009e0:	69a3      	ldr	r3, [r4, #24]
 80009e2:	60a3      	str	r3, [r4, #8]
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	071a      	lsls	r2, r3, #28
 80009e8:	d525      	bpl.n	8000a36 <__swbuf_r+0x68>
 80009ea:	6923      	ldr	r3, [r4, #16]
 80009ec:	b31b      	cbz	r3, 8000a36 <__swbuf_r+0x68>
 80009ee:	6823      	ldr	r3, [r4, #0]
 80009f0:	6922      	ldr	r2, [r4, #16]
 80009f2:	1a98      	subs	r0, r3, r2
 80009f4:	6963      	ldr	r3, [r4, #20]
 80009f6:	b2f6      	uxtb	r6, r6
 80009f8:	4283      	cmp	r3, r0
 80009fa:	4637      	mov	r7, r6
 80009fc:	dc04      	bgt.n	8000a08 <__swbuf_r+0x3a>
 80009fe:	4621      	mov	r1, r4
 8000a00:	4628      	mov	r0, r5
 8000a02:	f7ff ff6d 	bl	80008e0 <_fflush_r>
 8000a06:	b9e0      	cbnz	r0, 8000a42 <__swbuf_r+0x74>
 8000a08:	68a3      	ldr	r3, [r4, #8]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	60a3      	str	r3, [r4, #8]
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	6022      	str	r2, [r4, #0]
 8000a14:	701e      	strb	r6, [r3, #0]
 8000a16:	6962      	ldr	r2, [r4, #20]
 8000a18:	1c43      	adds	r3, r0, #1
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d004      	beq.n	8000a28 <__swbuf_r+0x5a>
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	07db      	lsls	r3, r3, #31
 8000a22:	d506      	bpl.n	8000a32 <__swbuf_r+0x64>
 8000a24:	2e0a      	cmp	r6, #10
 8000a26:	d104      	bne.n	8000a32 <__swbuf_r+0x64>
 8000a28:	4621      	mov	r1, r4
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f7ff ff58 	bl	80008e0 <_fflush_r>
 8000a30:	b938      	cbnz	r0, 8000a42 <__swbuf_r+0x74>
 8000a32:	4638      	mov	r0, r7
 8000a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a36:	4621      	mov	r1, r4
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f000 f805 	bl	8000a48 <__swsetup_r>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d0d5      	beq.n	80009ee <__swbuf_r+0x20>
 8000a42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000a46:	e7f4      	b.n	8000a32 <__swbuf_r+0x64>

08000a48 <__swsetup_r>:
 8000a48:	b538      	push	{r3, r4, r5, lr}
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <__swsetup_r+0xac>)
 8000a4c:	4605      	mov	r5, r0
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	460c      	mov	r4, r1
 8000a52:	b118      	cbz	r0, 8000a5c <__swsetup_r+0x14>
 8000a54:	6a03      	ldr	r3, [r0, #32]
 8000a56:	b90b      	cbnz	r3, 8000a5c <__swsetup_r+0x14>
 8000a58:	f7ff fd54 	bl	8000504 <__sinit>
 8000a5c:	89a3      	ldrh	r3, [r4, #12]
 8000a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a62:	0718      	lsls	r0, r3, #28
 8000a64:	d422      	bmi.n	8000aac <__swsetup_r+0x64>
 8000a66:	06d9      	lsls	r1, r3, #27
 8000a68:	d407      	bmi.n	8000a7a <__swsetup_r+0x32>
 8000a6a:	2309      	movs	r3, #9
 8000a6c:	602b      	str	r3, [r5, #0]
 8000a6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a72:	81a3      	strh	r3, [r4, #12]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a78:	e034      	b.n	8000ae4 <__swsetup_r+0x9c>
 8000a7a:	0758      	lsls	r0, r3, #29
 8000a7c:	d512      	bpl.n	8000aa4 <__swsetup_r+0x5c>
 8000a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a80:	b141      	cbz	r1, 8000a94 <__swsetup_r+0x4c>
 8000a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d002      	beq.n	8000a90 <__swsetup_r+0x48>
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 f90e 	bl	8000cac <_free_r>
 8000a90:	2300      	movs	r3, #0
 8000a92:	6363      	str	r3, [r4, #52]	; 0x34
 8000a94:	89a3      	ldrh	r3, [r4, #12]
 8000a96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a9a:	81a3      	strh	r3, [r4, #12]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6063      	str	r3, [r4, #4]
 8000aa0:	6923      	ldr	r3, [r4, #16]
 8000aa2:	6023      	str	r3, [r4, #0]
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	81a3      	strh	r3, [r4, #12]
 8000aac:	6923      	ldr	r3, [r4, #16]
 8000aae:	b94b      	cbnz	r3, 8000ac4 <__swsetup_r+0x7c>
 8000ab0:	89a3      	ldrh	r3, [r4, #12]
 8000ab2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aba:	d003      	beq.n	8000ac4 <__swsetup_r+0x7c>
 8000abc:	4621      	mov	r1, r4
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f000 f840 	bl	8000b44 <__smakebuf_r>
 8000ac4:	89a0      	ldrh	r0, [r4, #12]
 8000ac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000aca:	f010 0301 	ands.w	r3, r0, #1
 8000ace:	d00a      	beq.n	8000ae6 <__swsetup_r+0x9e>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60a3      	str	r3, [r4, #8]
 8000ad4:	6963      	ldr	r3, [r4, #20]
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	61a3      	str	r3, [r4, #24]
 8000ada:	6923      	ldr	r3, [r4, #16]
 8000adc:	b943      	cbnz	r3, 8000af0 <__swsetup_r+0xa8>
 8000ade:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ae2:	d1c4      	bne.n	8000a6e <__swsetup_r+0x26>
 8000ae4:	bd38      	pop	{r3, r4, r5, pc}
 8000ae6:	0781      	lsls	r1, r0, #30
 8000ae8:	bf58      	it	pl
 8000aea:	6963      	ldrpl	r3, [r4, #20]
 8000aec:	60a3      	str	r3, [r4, #8]
 8000aee:	e7f4      	b.n	8000ada <__swsetup_r+0x92>
 8000af0:	2000      	movs	r0, #0
 8000af2:	e7f7      	b.n	8000ae4 <__swsetup_r+0x9c>
 8000af4:	20000058 	.word	0x20000058

08000af8 <__swhatbuf_r>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	460c      	mov	r4, r1
 8000afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b00:	2900      	cmp	r1, #0
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	4615      	mov	r5, r2
 8000b06:	461e      	mov	r6, r3
 8000b08:	da0d      	bge.n	8000b26 <__swhatbuf_r+0x2e>
 8000b0a:	89a3      	ldrh	r3, [r4, #12]
 8000b0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	bf0c      	ite	eq
 8000b16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000b1a:	2340      	movne	r3, #64	; 0x40
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	6031      	str	r1, [r6, #0]
 8000b20:	602b      	str	r3, [r5, #0]
 8000b22:	b016      	add	sp, #88	; 0x58
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	466a      	mov	r2, sp
 8000b28:	f000 f858 	bl	8000bdc <_fstat_r>
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	dbec      	blt.n	8000b0a <__swhatbuf_r+0x12>
 8000b30:	9901      	ldr	r1, [sp, #4]
 8000b32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000b36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000b3a:	4259      	negs	r1, r3
 8000b3c:	4159      	adcs	r1, r3
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	e7eb      	b.n	8000b1c <__swhatbuf_r+0x24>

08000b44 <__smakebuf_r>:
 8000b44:	898b      	ldrh	r3, [r1, #12]
 8000b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b48:	079d      	lsls	r5, r3, #30
 8000b4a:	4606      	mov	r6, r0
 8000b4c:	460c      	mov	r4, r1
 8000b4e:	d507      	bpl.n	8000b60 <__smakebuf_r+0x1c>
 8000b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b54:	6023      	str	r3, [r4, #0]
 8000b56:	6123      	str	r3, [r4, #16]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	6163      	str	r3, [r4, #20]
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd70      	pop	{r4, r5, r6, pc}
 8000b60:	ab01      	add	r3, sp, #4
 8000b62:	466a      	mov	r2, sp
 8000b64:	f7ff ffc8 	bl	8000af8 <__swhatbuf_r>
 8000b68:	9900      	ldr	r1, [sp, #0]
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	f7ff fdb1 	bl	80006d4 <_malloc_r>
 8000b72:	b948      	cbnz	r0, 8000b88 <__smakebuf_r+0x44>
 8000b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b78:	059a      	lsls	r2, r3, #22
 8000b7a:	d4ef      	bmi.n	8000b5c <__smakebuf_r+0x18>
 8000b7c:	f023 0303 	bic.w	r3, r3, #3
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	81a3      	strh	r3, [r4, #12]
 8000b86:	e7e3      	b.n	8000b50 <__smakebuf_r+0xc>
 8000b88:	89a3      	ldrh	r3, [r4, #12]
 8000b8a:	6020      	str	r0, [r4, #0]
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	81a3      	strh	r3, [r4, #12]
 8000b92:	9b00      	ldr	r3, [sp, #0]
 8000b94:	6163      	str	r3, [r4, #20]
 8000b96:	9b01      	ldr	r3, [sp, #4]
 8000b98:	6120      	str	r0, [r4, #16]
 8000b9a:	b15b      	cbz	r3, 8000bb4 <__smakebuf_r+0x70>
 8000b9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ba0:	4630      	mov	r0, r6
 8000ba2:	f000 f82d 	bl	8000c00 <_isatty_r>
 8000ba6:	b128      	cbz	r0, 8000bb4 <__smakebuf_r+0x70>
 8000ba8:	89a3      	ldrh	r3, [r4, #12]
 8000baa:	f023 0303 	bic.w	r3, r3, #3
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	89a3      	ldrh	r3, [r4, #12]
 8000bb6:	431d      	orrs	r5, r3
 8000bb8:	81a5      	strh	r5, [r4, #12]
 8000bba:	e7cf      	b.n	8000b5c <__smakebuf_r+0x18>

08000bbc <_close_r>:
 8000bbc:	b538      	push	{r3, r4, r5, lr}
 8000bbe:	4d06      	ldr	r5, [pc, #24]	; (8000bd8 <_close_r+0x1c>)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	4608      	mov	r0, r1
 8000bc6:	602b      	str	r3, [r5, #0]
 8000bc8:	f7ff fb7b 	bl	80002c2 <_close>
 8000bcc:	1c43      	adds	r3, r0, #1
 8000bce:	d102      	bne.n	8000bd6 <_close_r+0x1a>
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	b103      	cbz	r3, 8000bd6 <_close_r+0x1a>
 8000bd4:	6023      	str	r3, [r4, #0]
 8000bd6:	bd38      	pop	{r3, r4, r5, pc}
 8000bd8:	200001c4 	.word	0x200001c4

08000bdc <_fstat_r>:
 8000bdc:	b538      	push	{r3, r4, r5, lr}
 8000bde:	4d07      	ldr	r5, [pc, #28]	; (8000bfc <_fstat_r+0x20>)
 8000be0:	2300      	movs	r3, #0
 8000be2:	4604      	mov	r4, r0
 8000be4:	4608      	mov	r0, r1
 8000be6:	4611      	mov	r1, r2
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	f7ff fb76 	bl	80002da <_fstat>
 8000bee:	1c43      	adds	r3, r0, #1
 8000bf0:	d102      	bne.n	8000bf8 <_fstat_r+0x1c>
 8000bf2:	682b      	ldr	r3, [r5, #0]
 8000bf4:	b103      	cbz	r3, 8000bf8 <_fstat_r+0x1c>
 8000bf6:	6023      	str	r3, [r4, #0]
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001c4 	.word	0x200001c4

08000c00 <_isatty_r>:
 8000c00:	b538      	push	{r3, r4, r5, lr}
 8000c02:	4d06      	ldr	r5, [pc, #24]	; (8000c1c <_isatty_r+0x1c>)
 8000c04:	2300      	movs	r3, #0
 8000c06:	4604      	mov	r4, r0
 8000c08:	4608      	mov	r0, r1
 8000c0a:	602b      	str	r3, [r5, #0]
 8000c0c:	f7ff fb75 	bl	80002fa <_isatty>
 8000c10:	1c43      	adds	r3, r0, #1
 8000c12:	d102      	bne.n	8000c1a <_isatty_r+0x1a>
 8000c14:	682b      	ldr	r3, [r5, #0]
 8000c16:	b103      	cbz	r3, 8000c1a <_isatty_r+0x1a>
 8000c18:	6023      	str	r3, [r4, #0]
 8000c1a:	bd38      	pop	{r3, r4, r5, pc}
 8000c1c:	200001c4 	.word	0x200001c4

08000c20 <_lseek_r>:
 8000c20:	b538      	push	{r3, r4, r5, lr}
 8000c22:	4d07      	ldr	r5, [pc, #28]	; (8000c40 <_lseek_r+0x20>)
 8000c24:	4604      	mov	r4, r0
 8000c26:	4608      	mov	r0, r1
 8000c28:	4611      	mov	r1, r2
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	602a      	str	r2, [r5, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f7ff fb6e 	bl	8000310 <_lseek>
 8000c34:	1c43      	adds	r3, r0, #1
 8000c36:	d102      	bne.n	8000c3e <_lseek_r+0x1e>
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	b103      	cbz	r3, 8000c3e <_lseek_r+0x1e>
 8000c3c:	6023      	str	r3, [r4, #0]
 8000c3e:	bd38      	pop	{r3, r4, r5, pc}
 8000c40:	200001c4 	.word	0x200001c4

08000c44 <_read_r>:
 8000c44:	b538      	push	{r3, r4, r5, lr}
 8000c46:	4d07      	ldr	r5, [pc, #28]	; (8000c64 <_read_r+0x20>)
 8000c48:	4604      	mov	r4, r0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	2200      	movs	r2, #0
 8000c50:	602a      	str	r2, [r5, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	f7ff fafc 	bl	8000250 <_read>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	d102      	bne.n	8000c62 <_read_r+0x1e>
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	b103      	cbz	r3, 8000c62 <_read_r+0x1e>
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
 8000c64:	200001c4 	.word	0x200001c4

08000c68 <_sbrk_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4d06      	ldr	r5, [pc, #24]	; (8000c84 <_sbrk_r+0x1c>)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4608      	mov	r0, r1
 8000c72:	602b      	str	r3, [r5, #0]
 8000c74:	f7ff fb5a 	bl	800032c <_sbrk>
 8000c78:	1c43      	adds	r3, r0, #1
 8000c7a:	d102      	bne.n	8000c82 <_sbrk_r+0x1a>
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	b103      	cbz	r3, 8000c82 <_sbrk_r+0x1a>
 8000c80:	6023      	str	r3, [r4, #0]
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
 8000c84:	200001c4 	.word	0x200001c4

08000c88 <_write_r>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4d07      	ldr	r5, [pc, #28]	; (8000ca8 <_write_r+0x20>)
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	4611      	mov	r1, r2
 8000c92:	2200      	movs	r2, #0
 8000c94:	602a      	str	r2, [r5, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	f7ff faf7 	bl	800028a <_write>
 8000c9c:	1c43      	adds	r3, r0, #1
 8000c9e:	d102      	bne.n	8000ca6 <_write_r+0x1e>
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	b103      	cbz	r3, 8000ca6 <_write_r+0x1e>
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	200001c4 	.word	0x200001c4

08000cac <_free_r>:
 8000cac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cae:	2900      	cmp	r1, #0
 8000cb0:	d044      	beq.n	8000d3c <_free_r+0x90>
 8000cb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cb6:	9001      	str	r0, [sp, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f1a1 0404 	sub.w	r4, r1, #4
 8000cbe:	bfb8      	it	lt
 8000cc0:	18e4      	addlt	r4, r4, r3
 8000cc2:	f7ff fe35 	bl	8000930 <__malloc_lock>
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <_free_r+0x94>)
 8000cc8:	9801      	ldr	r0, [sp, #4]
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	b933      	cbnz	r3, 8000cdc <_free_r+0x30>
 8000cce:	6063      	str	r3, [r4, #4]
 8000cd0:	6014      	str	r4, [r2, #0]
 8000cd2:	b003      	add	sp, #12
 8000cd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000cd8:	f7ff be30 	b.w	800093c <__malloc_unlock>
 8000cdc:	42a3      	cmp	r3, r4
 8000cde:	d908      	bls.n	8000cf2 <_free_r+0x46>
 8000ce0:	6825      	ldr	r5, [r4, #0]
 8000ce2:	1961      	adds	r1, r4, r5
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	bf01      	itttt	eq
 8000ce8:	6819      	ldreq	r1, [r3, #0]
 8000cea:	685b      	ldreq	r3, [r3, #4]
 8000cec:	1949      	addeq	r1, r1, r5
 8000cee:	6021      	streq	r1, [r4, #0]
 8000cf0:	e7ed      	b.n	8000cce <_free_r+0x22>
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	b10b      	cbz	r3, 8000cfc <_free_r+0x50>
 8000cf8:	42a3      	cmp	r3, r4
 8000cfa:	d9fa      	bls.n	8000cf2 <_free_r+0x46>
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	1855      	adds	r5, r2, r1
 8000d00:	42a5      	cmp	r5, r4
 8000d02:	d10b      	bne.n	8000d1c <_free_r+0x70>
 8000d04:	6824      	ldr	r4, [r4, #0]
 8000d06:	4421      	add	r1, r4
 8000d08:	1854      	adds	r4, r2, r1
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	6011      	str	r1, [r2, #0]
 8000d0e:	d1e0      	bne.n	8000cd2 <_free_r+0x26>
 8000d10:	681c      	ldr	r4, [r3, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	6053      	str	r3, [r2, #4]
 8000d16:	440c      	add	r4, r1
 8000d18:	6014      	str	r4, [r2, #0]
 8000d1a:	e7da      	b.n	8000cd2 <_free_r+0x26>
 8000d1c:	d902      	bls.n	8000d24 <_free_r+0x78>
 8000d1e:	230c      	movs	r3, #12
 8000d20:	6003      	str	r3, [r0, #0]
 8000d22:	e7d6      	b.n	8000cd2 <_free_r+0x26>
 8000d24:	6825      	ldr	r5, [r4, #0]
 8000d26:	1961      	adds	r1, r4, r5
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	bf04      	itt	eq
 8000d2c:	6819      	ldreq	r1, [r3, #0]
 8000d2e:	685b      	ldreq	r3, [r3, #4]
 8000d30:	6063      	str	r3, [r4, #4]
 8000d32:	bf04      	itt	eq
 8000d34:	1949      	addeq	r1, r1, r5
 8000d36:	6021      	streq	r1, [r4, #0]
 8000d38:	6054      	str	r4, [r2, #4]
 8000d3a:	e7ca      	b.n	8000cd2 <_free_r+0x26>
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd30      	pop	{r4, r5, pc}
 8000d40:	200001bc 	.word	0x200001bc

08000d44 <_init>:
 8000d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d46:	bf00      	nop
 8000d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4a:	bc08      	pop	{r3}
 8000d4c:	469e      	mov	lr, r3
 8000d4e:	4770      	bx	lr

08000d50 <_fini>:
 8000d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d52:	bf00      	nop
 8000d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d56:	bc08      	pop	{r3}
 8000d58:	469e      	mov	lr, r3
 8000d5a:	4770      	bx	lr
